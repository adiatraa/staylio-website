// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hotel {
  id      String    @id @default(uuid())
  name    String
  userId  String
  banners Banner[] @relation("HotelToBanner")
  categories Category[] @relation("HotelToCategory")
  product Product[] @relation("HotelToProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id      String @id @default(uuid())
  hotelId String
  hotel   Hotel @relation("HotelToBanner", fields: [hotelId], references: [id])
  label   String
  imageUrl  String
  categories  Category[]
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt

  @@index([hotelId])
}

model Category {
  id      String @id @default(uuid())
  hotelId String
  hotel   Hotel @relation("HotelToCategory", fields: [hotelId], references: [id])
  bannerId  String
  banner Banner @relation(fields: [bannerId], references: [id])
  products  Product[] @relation("CategoryToProduct")
  name    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hotelId])
  @@index([bannerId])
}

model Product {
  id      String @id @default(uuid())
  hotelId String
  hotel   Hotel @relation("HotelToProduct", fields: [hotelId], references: [id])
  categoryId  String
  category  Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name    String
  price   Decimal
  longitude   Decimal
  latitude   Decimal
  city String
  overview    String
  capacity       Decimal
  isFeatured  Boolean @default(false)
  images  Image[]
  amenities String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([hotelId])
  @@index([categoryId])
}

model Image {
  id        String @unique @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}